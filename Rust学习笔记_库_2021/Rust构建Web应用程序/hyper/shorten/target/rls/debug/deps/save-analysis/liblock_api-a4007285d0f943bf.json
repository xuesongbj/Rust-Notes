{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4","program":"/Users/zhangshaozhi/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","lock_api","--edition=2018","/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=a4007285d0f943bf","-C","extra-filename=-a4007285d0f943bf","--out-dir","/Users/zhangshaozhi/Desktop/Rust-Notes/Rust学习笔记_库_2021/Rust构建Web应用程序/hyper/shorten/target/rls/debug/deps","-L","dependency=/Users/zhangshaozhi/Desktop/Rust-Notes/Rust学习笔记_库_2021/Rust构建Web应用程序/hyper/shorten/target/rls/debug/deps","--extern","scopeguard=/Users/zhangshaozhi/Desktop/Rust-Notes/Rust学习笔记_库_2021/Rust构建Web应用程序/hyper/shorten/target/rls/debug/deps/libscopeguard-80c9e0d005c871fa.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/zhangshaozhi/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/zhangshaozhi/Desktop/Rust-Notes/Rust学习笔记_库_2021/Rust构建Web应用程序/hyper/shorten/target/rls/debug/deps/liblock_api-a4007285d0f943bf.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[4797544493069024980,0]},"crate_root":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src","external_crates":[{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11210054105357105415,0]}},{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10211807999108752415,0]}},{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4904877167227750013,0]}},{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[1679479393273212407,0]}}],"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":333,"byte_end":4033,"line_start":8,"line_end":109,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3951,"byte_end":3952,"line_start":103,"line_end":103,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3992,"byte_end":3993,"line_start":106,"line_end":106,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":4031,"byte_end":4032,"line_start":109,"line_end":109,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":333,"byte_end":4033,"line_start":8,"line_end":109,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":919}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"/ This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ implementing custom lock types, it also allows users to write code which is","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ generic with regards to different lock implementations.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Basic usage of this crate is very straightforward:","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/    data protected by the lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/ 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/    See the [example](#example) below for details.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ use std::sync::atomic::{AtomicBool, Ordering};","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1436,"byte_end":1486,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1487,"byte_end":1490,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // 1. Define our raw lock type","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1491,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ pub struct RawSpinlock(AtomicBool);","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1526,"byte_end":1565,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1566,"byte_end":1569,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // 2. Implement RawMutex for this type","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1570,"byte_end":1612,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1613,"byte_end":1655,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/     const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1656,"byte_end":1726,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1727,"byte_end":1730,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1731,"byte_end":1807,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/     type GuardMarker = GuardSend;","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1808,"byte_end":1845,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1846,"byte_end":1849,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/     fn lock(&self) {","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1850,"byte_end":1874,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1875,"byte_end":1954,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/         // suffices for the sake of this example.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":1955,"byte_end":2008,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/         while !self.try_lock() {}","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2009,"byte_end":2046,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2047,"byte_end":2056,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2057,"byte_end":2060,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn try_lock(&self) -> bool {","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2061,"byte_end":2097,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/         self.0","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2098,"byte_end":2116,"line_start":50,"line_end":50,"column_start":1,"column_end":19}},{"value":"/             .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2117,"byte_end":2201,"line_start":51,"line_end":51,"column_start":1,"column_end":85}},{"value":"/             .is_ok()","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2202,"byte_end":2226,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2227,"byte_end":2236,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2237,"byte_end":2240,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/     fn unlock(&self) {","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2241,"byte_end":2267,"line_start":55,"line_end":55,"column_start":1,"column_end":27}},{"value":"/         self.0.store(false, Ordering::Release);","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2268,"byte_end":2319,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2320,"byte_end":2329,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2330,"byte_end":2335,"line_start":58,"line_end":58,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2336,"byte_end":2339,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2340,"byte_end":2424,"line_start":60,"line_end":60,"column_start":1,"column_end":85}},{"value":"/ pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2425,"byte_end":2484,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"/ pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2485,"byte_end":2562,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2563,"byte_end":2570,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2571,"byte_end":2574,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Extension traits","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2575,"byte_end":2597,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2598,"byte_end":2601,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2602,"byte_end":2681,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ of exposing additional functionality in your lock types by implementing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2682,"byte_end":2757,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/ additional traits for it. Examples of extension features include:","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2758,"byte_end":2827,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2828,"byte_end":2831,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2832,"byte_end":2886,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"/ - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2887,"byte_end":2942,"line_start":72,"line_end":72,"column_start":1,"column_end":56}},{"value":"/ - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":2943,"byte_end":2999,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3000,"byte_end":3049,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3050,"byte_end":3098,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3099,"byte_end":3102,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3103,"byte_end":3182,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/ functionality if the raw lock type implements these extension traits.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3183,"byte_end":3256,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3257,"byte_end":3260,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Cargo features","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3261,"byte_end":3281,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3282,"byte_end":3285,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This crate supports two cargo features:","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3286,"byte_end":3329,"line_start":82,"line_end":82,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3330,"byte_end":3333,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3334,"byte_end":3416,"line_start":84,"line_end":84,"column_start":1,"column_end":83}},{"value":"/ - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3417,"byte_end":3492,"line_start":85,"line_end":85,"column_start":1,"column_end":76}},{"value":"/   feature is `const fn` constructors for lock types.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3493,"byte_end":3549,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3551,"byte_end":3561,"line_start":88,"line_end":88,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3562,"byte_end":3584,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3585,"byte_end":3611,"line_start":90,"line_end":90,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3790,"byte_end":3799,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3705,"byte_end":3778,"line_start":96,"line_end":96,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3895,"byte_end":3906,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3806,"byte_end":3883,"line_start":99,"line_end":99,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":31},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4979,"byte_end":4987,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4645,"byte_end":4678,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4679,"byte_end":4682,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4683,"byte_end":4758,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4759,"byte_end":4792,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4793,"byte_end":4796,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4797,"byte_end":4809,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4810,"byte_end":4813,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4814,"byte_end":4886,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4887,"byte_end":4961,"line_start":28,"line_end":28,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":32},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5290,"byte_end":5294,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4994,"byte_end":5034,"line_start":30,"line_end":30,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5231,"byte_end":5279,"line_start":33,"line_end":33,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":33},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5459,"byte_end":5470,"line_start":38,"line_end":38,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5307,"byte_end":5382,"line_start":36,"line_end":36,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5387,"byte_end":5449,"line_start":37,"line_end":37,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5564,"byte_end":5568,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"pub fn lock(&Self)","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5477,"byte_end":5556,"line_start":40,"line_end":40,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5726,"byte_end":5734,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5582,"byte_end":5649,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5654,"byte_end":5718,"line_start":44,"line_end":44,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5787,"byte_end":5793,"line_start":48,"line_end":48,"column_start":8,"column_end":14},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"pub fn unlock(&Self)","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":" Unlocks this mutex.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5756,"byte_end":5779,"line_start":47,"line_end":47,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6185,"byte_end":6197,"line_start":57,"line_end":57,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5805,"byte_end":5869,"line_start":51,"line_end":51,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5870,"byte_end":5873,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5874,"byte_end":5954,"line_start":53,"line_end":53,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5955,"byte_end":6030,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6031,"byte_end":6105,"line_start":55,"line_end":55,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6106,"byte_end":6167,"line_start":56,"line_end":56,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6274,"byte_end":6285,"line_start":59,"line_end":59,"column_start":8,"column_end":19},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"pub fn unlock_fair(&Self)","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6214,"byte_end":6266,"line_start":58,"line_end":58,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6578,"byte_end":6582,"line_start":66,"line_end":66,"column_start":8,"column_end":12},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"pub fn bump(&Self)","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6299,"byte_end":6368,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6373,"byte_end":6376,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6381,"byte_end":6457,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6462,"byte_end":6538,"line_start":64,"line_end":64,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6543,"byte_end":6570,"line_start":65,"line_end":65,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":40},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6880,"byte_end":6893,"line_start":76,"line_end":76,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6650,"byte_end":6721,"line_start":72,"line_end":72,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6722,"byte_end":6725,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6726,"byte_end":6806,"line_start":74,"line_end":74,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6807,"byte_end":6862,"line_start":75,"line_end":75,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":41},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6962,"byte_end":6970,"line_start":78,"line_end":78,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6910,"byte_end":6952,"line_start":77,"line_end":77,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":42},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7030,"byte_end":7037,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6977,"byte_end":7020,"line_start":80,"line_end":80,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7113,"byte_end":7125,"line_start":84,"line_end":84,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"pub fn try_lock_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7044,"byte_end":7105,"line_start":83,"line_end":83,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7241,"byte_end":7255,"line_start":87,"line_end":87,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"pub fn try_lock_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7172,"byte_end":7233,"line_start":86,"line_end":86,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":45},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7809,"byte_end":7814,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7299,"byte_end":7365,"line_start":90,"line_end":90,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7366,"byte_end":7369,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7370,"byte_end":7449,"line_start":92,"line_end":92,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7450,"byte_end":7517,"line_start":93,"line_end":93,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7518,"byte_end":7597,"line_start":94,"line_end":94,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7598,"byte_end":7673,"line_start":95,"line_end":95,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7674,"byte_end":7753,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7754,"byte_end":7797,"line_start":97,"line_end":97,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8436,"byte_end":8439,"line_start":120,"line_end":120,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"pub fn new(T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8314,"byte_end":8373,"line_start":117,"line_end":117,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8378,"byte_end":8410,"line_start":118,"line_end":118,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8415,"byte_end":8424,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8649,"byte_end":8659,"line_start":129,"line_end":129,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8568,"byte_end":8623,"line_start":127,"line_end":127,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8628,"byte_end":8637,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8915,"byte_end":8924,"line_start":139,"line_end":139,"column_start":18,"column_end":27},"name":"const_new","qualname":"<Mutex<R, T>>::const_new","value":"pub const fn const_new(R, T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex based on a pre-existing raw mutex.","sig":null,"attributes":[{"value":"/ Creates a new mutex based on a pre-existing raw mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8742,"byte_end":8800,"line_start":135,"line_end":135,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8805,"byte_end":8808,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ This allows creating a mutex in a constant context on stable Rust.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8813,"byte_end":8883,"line_start":137,"line_end":137,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8888,"byte_end":8897,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9896,"byte_end":9900,"line_start":169,"line_end":169,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9358,"byte_end":9434,"line_start":159,"line_end":159,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9439,"byte_end":9442,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9447,"byte_end":9525,"line_start":161,"line_end":161,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9530,"byte_end":9605,"line_start":162,"line_end":162,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9610,"byte_end":9686,"line_start":163,"line_end":163,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9691,"byte_end":9751,"line_start":164,"line_end":164,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9756,"byte_end":9759,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9764,"byte_end":9840,"line_start":166,"line_end":166,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9845,"byte_end":9870,"line_start":167,"line_end":167,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9875,"byte_end":9884,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10354,"byte_end":10362,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10052,"byte_end":10086,"line_start":175,"line_end":175,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10091,"byte_end":10094,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10099,"byte_end":10175,"line_start":177,"line_end":177,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10180,"byte_end":10256,"line_start":178,"line_end":178,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10261,"byte_end":10282,"line_start":179,"line_end":179,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10287,"byte_end":10290,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10295,"byte_end":10328,"line_start":181,"line_end":181,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10333,"byte_end":10342,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10835,"byte_end":10842,"line_start":197,"line_end":197,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10588,"byte_end":10643,"line_start":192,"line_end":192,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10648,"byte_end":10651,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10656,"byte_end":10731,"line_start":194,"line_end":194,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10736,"byte_end":10809,"line_start":195,"line_end":195,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10814,"byte_end":10823,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11426,"byte_end":11438,"line_start":213,"line_end":213,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10918,"byte_end":10949,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10954,"byte_end":10957,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10962,"byte_end":11036,"line_start":203,"line_end":203,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11041,"byte_end":11111,"line_start":204,"line_end":204,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11116,"byte_end":11137,"line_start":205,"line_end":205,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11142,"byte_end":11145,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11150,"byte_end":11162,"line_start":207,"line_end":207,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11167,"byte_end":11170,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11175,"byte_end":11249,"line_start":209,"line_end":209,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11254,"byte_end":11323,"line_start":210,"line_end":210,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11328,"byte_end":11393,"line_start":211,"line_end":211,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11398,"byte_end":11407,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11875,"byte_end":11878,"line_start":227,"line_end":227,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11486,"byte_end":11530,"line_start":217,"line_end":217,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11535,"byte_end":11538,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11543,"byte_end":11618,"line_start":219,"line_end":219,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11623,"byte_end":11684,"line_start":220,"line_end":220,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11689,"byte_end":11692,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11697,"byte_end":11709,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11714,"byte_end":11717,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11722,"byte_end":11789,"line_start":224,"line_end":224,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11794,"byte_end":11842,"line_start":225,"line_end":225,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11847,"byte_end":11856,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12509,"byte_end":12526,"line_start":245,"line_end":245,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11972,"byte_end":12032,"line_start":233,"line_end":233,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12037,"byte_end":12040,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12045,"byte_end":12119,"line_start":235,"line_end":235,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12124,"byte_end":12194,"line_start":236,"line_end":236,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12199,"byte_end":12220,"line_start":237,"line_end":237,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12225,"byte_end":12228,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12233,"byte_end":12245,"line_start":239,"line_end":239,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12250,"byte_end":12253,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12258,"byte_end":12332,"line_start":241,"line_end":241,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12337,"byte_end":12406,"line_start":242,"line_end":242,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12411,"byte_end":12476,"line_start":243,"line_end":243,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12481,"byte_end":12490,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12926,"byte_end":12938,"line_start":257,"line_end":257,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12629,"byte_end":12690,"line_start":251,"line_end":251,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12695,"byte_end":12698,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12703,"byte_end":12773,"line_start":253,"line_end":253,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12778,"byte_end":12853,"line_start":254,"line_end":254,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12858,"byte_end":12900,"line_start":255,"line_end":255,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12905,"byte_end":12914,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13494,"byte_end":13508,"line_start":272,"line_end":272,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13197,"byte_end":13258,"line_start":266,"line_end":266,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13263,"byte_end":13266,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13271,"byte_end":13341,"line_start":268,"line_end":268,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13346,"byte_end":13421,"line_start":269,"line_end":269,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13426,"byte_end":13468,"line_start":270,"line_end":270,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13473,"byte_end":13482,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":99},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15716,"byte_end":15726,"line_start":351,"line_end":351,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15376,"byte_end":15456,"line_start":345,"line_end":345,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15457,"byte_end":15517,"line_start":346,"line_end":346,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15518,"byte_end":15521,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15522,"byte_end":15600,"line_start":348,"line_end":348,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15601,"byte_end":15644,"line_start":349,"line_end":349,"column_start":1,"column_end":44}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15645,"byte_end":15704,"line_start":350,"line_end":350,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16077,"byte_end":16082,"line_start":360,"line_end":360,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"pub fn mutex(&Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16010,"byte_end":16065,"line_start":359,"line_end":359,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16547,"byte_end":16550,"line_start":373,"line_end":373,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16141,"byte_end":16211,"line_start":364,"line_end":364,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16216,"byte_end":16219,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16224,"byte_end":16281,"line_start":366,"line_end":366,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16286,"byte_end":16318,"line_start":367,"line_end":367,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16323,"byte_end":16326,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16331,"byte_end":16382,"line_start":369,"line_end":369,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16387,"byte_end":16463,"line_start":370,"line_end":370,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16468,"byte_end":16521,"line_start":371,"line_end":371,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16526,"byte_end":16535,"line_start":372,"line_end":372,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17385,"byte_end":17392,"line_start":397,"line_end":397,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16894,"byte_end":16962,"line_start":387,"line_end":387,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16967,"byte_end":17045,"line_start":388,"line_end":388,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17050,"byte_end":17053,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17058,"byte_end":17115,"line_start":390,"line_end":390,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17120,"byte_end":17152,"line_start":391,"line_end":391,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17157,"byte_end":17160,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17165,"byte_end":17216,"line_start":393,"line_end":393,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17221,"byte_end":17301,"line_start":394,"line_end":394,"column_start":5,"column_end":85}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17306,"byte_end":17359,"line_start":395,"line_end":395,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17364,"byte_end":17373,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18073,"byte_end":18081,"line_start":419,"line_end":419,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17847,"byte_end":17911,"line_start":414,"line_end":414,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17916,"byte_end":17919,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17924,"byte_end":17992,"line_start":416,"line_end":416,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17997,"byte_end":18047,"line_start":417,"line_end":417,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18052,"byte_end":18061,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19097,"byte_end":19108,"line_start":443,"line_end":443,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18316,"byte_end":18367,"line_start":430,"line_end":430,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18372,"byte_end":18375,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18380,"byte_end":18454,"line_start":432,"line_end":432,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18459,"byte_end":18531,"line_start":433,"line_end":433,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18536,"byte_end":18610,"line_start":434,"line_end":434,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18615,"byte_end":18690,"line_start":435,"line_end":435,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18695,"byte_end":18766,"line_start":436,"line_end":436,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18771,"byte_end":18828,"line_start":437,"line_end":437,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18833,"byte_end":18836,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18841,"byte_end":18917,"line_start":439,"line_end":439,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18922,"byte_end":18998,"line_start":440,"line_end":440,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19003,"byte_end":19071,"line_start":441,"line_end":441,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19076,"byte_end":19085,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19484,"byte_end":19497,"line_start":455,"line_end":455,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19190,"byte_end":19254,"line_start":448,"line_end":448,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19259,"byte_end":19262,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19267,"byte_end":19322,"line_start":450,"line_end":450,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19327,"byte_end":19330,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19335,"byte_end":19403,"line_start":452,"line_end":452,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19408,"byte_end":19458,"line_start":453,"line_end":453,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19463,"byte_end":19472,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19962,"byte_end":19966,"line_start":470,"line_end":470,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19665,"byte_end":19734,"line_start":464,"line_end":464,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19739,"byte_end":19742,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19747,"byte_end":19823,"line_start":466,"line_end":466,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19828,"byte_end":19904,"line_start":467,"line_end":467,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19909,"byte_end":19936,"line_start":468,"line_end":468,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19941,"byte_end":19950,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":158},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21512,"byte_end":21528,"line_start":520,"line_end":520,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21076,"byte_end":21151,"line_start":512,"line_end":512,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21152,"byte_end":21187,"line_start":513,"line_end":513,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21188,"byte_end":21191,"line_start":514,"line_end":514,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21192,"byte_end":21271,"line_start":515,"line_end":515,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21272,"byte_end":21347,"line_start":516,"line_end":516,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21348,"byte_end":21428,"line_start":517,"line_end":517,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21429,"byte_end":21440,"line_start":518,"line_end":518,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21441,"byte_end":21500,"line_start":519,"line_end":519,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22356,"byte_end":22359,"line_start":545,"line_end":545,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21938,"byte_end":22008,"line_start":536,"line_end":536,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22013,"byte_end":22016,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22021,"byte_end":22084,"line_start":538,"line_end":538,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22089,"byte_end":22121,"line_start":539,"line_end":539,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22126,"byte_end":22129,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22134,"byte_end":22185,"line_start":541,"line_end":541,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22190,"byte_end":22272,"line_start":542,"line_end":542,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22277,"byte_end":22330,"line_start":543,"line_end":543,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22335,"byte_end":22344,"line_start":544,"line_end":544,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23187,"byte_end":23194,"line_start":569,"line_end":569,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22684,"byte_end":22752,"line_start":559,"line_end":559,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22757,"byte_end":22835,"line_start":560,"line_end":560,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22840,"byte_end":22843,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22848,"byte_end":22911,"line_start":562,"line_end":562,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22916,"byte_end":22948,"line_start":563,"line_end":563,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22953,"byte_end":22956,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22961,"byte_end":23012,"line_start":565,"line_end":565,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23017,"byte_end":23103,"line_start":566,"line_end":566,"column_start":5,"column_end":91}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23108,"byte_end":23161,"line_start":567,"line_end":567,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23166,"byte_end":23175,"line_start":568,"line_end":568,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24489,"byte_end":24500,"line_start":601,"line_end":601,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23708,"byte_end":23759,"line_start":588,"line_end":588,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23764,"byte_end":23767,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23772,"byte_end":23846,"line_start":590,"line_end":590,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23851,"byte_end":23923,"line_start":591,"line_end":591,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23928,"byte_end":24002,"line_start":592,"line_end":592,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24007,"byte_end":24082,"line_start":593,"line_end":593,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24087,"byte_end":24158,"line_start":594,"line_end":594,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24163,"byte_end":24220,"line_start":595,"line_end":595,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24225,"byte_end":24228,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24233,"byte_end":24309,"line_start":597,"line_end":597,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24314,"byte_end":24390,"line_start":598,"line_end":598,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24395,"byte_end":24463,"line_start":599,"line_end":599,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24468,"byte_end":24477,"line_start":600,"line_end":600,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":260},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26783,"byte_end":26794,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26382,"byte_end":26434,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26435,"byte_end":26438,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26439,"byte_end":26513,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26514,"byte_end":26540,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26541,"byte_end":26544,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26545,"byte_end":26557,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26558,"byte_end":26561,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26562,"byte_end":26640,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26641,"byte_end":26714,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26715,"byte_end":26765,"line_start":37,"line_end":37,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":261},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27075,"byte_end":27079,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26801,"byte_end":26819,"line_start":39,"line_end":39,"column_start":5,"column_end":23}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27016,"byte_end":27064,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27190,"byte_end":27207,"line_start":47,"line_end":47,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"pub fn nonzero_thread_id(&Self) -> NonZeroUsize","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27092,"byte_end":27163,"line_start":45,"line_end":45,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27168,"byte_end":27182,"line_start":46,"line_end":46,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":292},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30057,"byte_end":30071,"line_start":148,"line_end":148,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29582,"byte_end":29645,"line_start":137,"line_end":137,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29646,"byte_end":29649,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29650,"byte_end":29720,"line_start":139,"line_end":139,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29721,"byte_end":29724,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29725,"byte_end":29805,"line_start":141,"line_end":141,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29806,"byte_end":29824,"line_start":142,"line_end":142,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29825,"byte_end":29905,"line_start":143,"line_end":143,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29906,"byte_end":29945,"line_start":144,"line_end":144,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29946,"byte_end":29949,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29950,"byte_end":30030,"line_start":146,"line_end":146,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30031,"byte_end":30045,"line_start":147,"line_end":147,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31051,"byte_end":31054,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"pub fn new(T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30919,"byte_end":30988,"line_start":178,"line_end":178,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30993,"byte_end":31025,"line_start":179,"line_end":179,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31030,"byte_end":31039,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31469,"byte_end":31479,"line_start":195,"line_end":195,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31388,"byte_end":31443,"line_start":193,"line_end":193,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31448,"byte_end":31457,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31820,"byte_end":31829,"line_start":207,"line_end":207,"column_start":18,"column_end":27},"name":"const_new","qualname":"<ReentrantMutex<R, G, T>>::const_new","value":"pub const fn const_new(R, G, T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex based on a pre-existing raw mutex and a\n helper to get the thread ID.","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex based on a pre-existing raw mutex and a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31577,"byte_end":31650,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/ helper to get the thread ID.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31655,"byte_end":31687,"line_start":202,"line_end":202,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31692,"byte_end":31695,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ This allows creating a reentrant mutex in a constant context on stable","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31700,"byte_end":31774,"line_start":204,"line_end":204,"column_start":5,"column_end":79}},{"value":"/ Rust.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31779,"byte_end":31788,"line_start":205,"line_end":205,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31793,"byte_end":31802,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33168,"byte_end":33172,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32529,"byte_end":32605,"line_start":232,"line_end":232,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32610,"byte_end":32623,"line_start":233,"line_end":233,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32628,"byte_end":32631,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32636,"byte_end":32712,"line_start":235,"line_end":235,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32717,"byte_end":32793,"line_start":236,"line_end":236,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32798,"byte_end":32874,"line_start":237,"line_end":237,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32879,"byte_end":32943,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32948,"byte_end":33019,"line_start":239,"line_end":239,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33024,"byte_end":33099,"line_start":240,"line_end":240,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33104,"byte_end":33142,"line_start":241,"line_end":241,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33147,"byte_end":33156,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33638,"byte_end":33646,"line_start":257,"line_end":257,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33336,"byte_end":33370,"line_start":249,"line_end":249,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33375,"byte_end":33378,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33383,"byte_end":33459,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33464,"byte_end":33540,"line_start":252,"line_end":252,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33545,"byte_end":33566,"line_start":253,"line_end":253,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33571,"byte_end":33574,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33579,"byte_end":33612,"line_start":255,"line_end":255,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33617,"byte_end":33626,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34140,"byte_end":34147,"line_start":271,"line_end":271,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33884,"byte_end":33939,"line_start":266,"line_end":266,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33944,"byte_end":33947,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33952,"byte_end":34036,"line_start":268,"line_end":268,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34041,"byte_end":34114,"line_start":269,"line_end":269,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34119,"byte_end":34128,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34749,"byte_end":34761,"line_start":287,"line_end":287,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34223,"byte_end":34254,"line_start":275,"line_end":275,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34259,"byte_end":34262,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34267,"byte_end":34341,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34346,"byte_end":34425,"line_start":278,"line_end":278,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34430,"byte_end":34451,"line_start":279,"line_end":279,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34456,"byte_end":34459,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34464,"byte_end":34476,"line_start":281,"line_end":281,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34481,"byte_end":34484,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34489,"byte_end":34563,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34568,"byte_end":34646,"line_start":284,"line_end":284,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34651,"byte_end":34716,"line_start":285,"line_end":285,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34721,"byte_end":34730,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35207,"byte_end":35210,"line_start":301,"line_end":301,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34809,"byte_end":34853,"line_start":291,"line_end":291,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34858,"byte_end":34861,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34866,"byte_end":34941,"line_start":293,"line_end":293,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34946,"byte_end":35007,"line_start":294,"line_end":294,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35012,"byte_end":35015,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35020,"byte_end":35032,"line_start":296,"line_end":296,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35037,"byte_end":35040,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35045,"byte_end":35112,"line_start":298,"line_end":298,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35117,"byte_end":35174,"line_start":299,"line_end":299,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35179,"byte_end":35188,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35893,"byte_end":35910,"line_start":319,"line_end":319,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35338,"byte_end":35398,"line_start":307,"line_end":307,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35403,"byte_end":35406,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35411,"byte_end":35485,"line_start":309,"line_end":309,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35490,"byte_end":35569,"line_start":310,"line_end":310,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35574,"byte_end":35595,"line_start":311,"line_end":311,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35600,"byte_end":35603,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35608,"byte_end":35620,"line_start":313,"line_end":313,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35625,"byte_end":35628,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35633,"byte_end":35707,"line_start":315,"line_end":315,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35712,"byte_end":35790,"line_start":316,"line_end":316,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35795,"byte_end":35860,"line_start":317,"line_end":317,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35865,"byte_end":35874,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36338,"byte_end":36350,"line_start":331,"line_end":331,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36041,"byte_end":36102,"line_start":325,"line_end":325,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36107,"byte_end":36110,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36115,"byte_end":36185,"line_start":327,"line_end":327,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36190,"byte_end":36265,"line_start":328,"line_end":328,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36270,"byte_end":36312,"line_start":329,"line_end":329,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36317,"byte_end":36326,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36918,"byte_end":36932,"line_start":346,"line_end":346,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36621,"byte_end":36682,"line_start":340,"line_end":340,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36687,"byte_end":36690,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36695,"byte_end":36765,"line_start":342,"line_end":342,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36770,"byte_end":36845,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36850,"byte_end":36892,"line_start":344,"line_end":344,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36897,"byte_end":36906,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":357},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39429,"byte_end":39448,"line_start":430,"line_end":430,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39086,"byte_end":39173,"line_start":424,"line_end":424,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39174,"byte_end":39237,"line_start":425,"line_end":425,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39238,"byte_end":39241,"line_start":426,"line_end":426,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39242,"byte_end":39320,"line_start":427,"line_end":427,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39321,"byte_end":39348,"line_start":428,"line_end":428,"column_start":1,"column_end":28}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39349,"byte_end":39417,"line_start":429,"line_end":429,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39909,"byte_end":39916,"line_start":442,"line_end":442,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"pub fn remutex(&Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39833,"byte_end":39897,"line_start":441,"line_end":441,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40422,"byte_end":40425,"line_start":455,"line_end":455,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39989,"byte_end":40068,"line_start":446,"line_end":446,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40073,"byte_end":40076,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40081,"byte_end":40147,"line_start":448,"line_end":448,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40152,"byte_end":40184,"line_start":449,"line_end":449,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40189,"byte_end":40192,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40197,"byte_end":40248,"line_start":451,"line_end":451,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40253,"byte_end":40338,"line_start":452,"line_end":452,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40343,"byte_end":40396,"line_start":453,"line_end":453,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40401,"byte_end":40410,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41295,"byte_end":41302,"line_start":479,"line_end":479,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&mut T) ->\nOption<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40782,"byte_end":40860,"line_start":469,"line_end":469,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40865,"byte_end":40941,"line_start":470,"line_end":470,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40946,"byte_end":40949,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40954,"byte_end":41020,"line_start":472,"line_end":472,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41025,"byte_end":41057,"line_start":473,"line_end":473,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41062,"byte_end":41065,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41070,"byte_end":41121,"line_start":475,"line_end":475,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41126,"byte_end":41211,"line_start":476,"line_end":476,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41216,"byte_end":41269,"line_start":477,"line_end":477,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41274,"byte_end":41283,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42031,"byte_end":42039,"line_start":504,"line_end":504,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41805,"byte_end":41869,"line_start":499,"line_end":499,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41874,"byte_end":41877,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41882,"byte_end":41950,"line_start":501,"line_end":501,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41955,"byte_end":42005,"line_start":502,"line_end":502,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42010,"byte_end":42019,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43105,"byte_end":43116,"line_start":530,"line_end":530,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42315,"byte_end":42366,"line_start":517,"line_end":517,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42371,"byte_end":42374,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42379,"byte_end":42453,"line_start":519,"line_end":519,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42458,"byte_end":42530,"line_start":520,"line_end":520,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42535,"byte_end":42609,"line_start":521,"line_end":521,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42614,"byte_end":42689,"line_start":522,"line_end":522,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42694,"byte_end":42765,"line_start":523,"line_end":523,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42770,"byte_end":42827,"line_start":524,"line_end":524,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42832,"byte_end":42835,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42840,"byte_end":42916,"line_start":526,"line_end":526,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42921,"byte_end":42997,"line_start":527,"line_end":527,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43002,"byte_end":43079,"line_start":528,"line_end":528,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43084,"byte_end":43093,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43488,"byte_end":43501,"line_start":542,"line_end":542,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43200,"byte_end":43264,"line_start":535,"line_end":535,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43269,"byte_end":43272,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43277,"byte_end":43326,"line_start":537,"line_end":537,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43331,"byte_end":43334,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43339,"byte_end":43407,"line_start":539,"line_end":539,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43412,"byte_end":43462,"line_start":540,"line_end":540,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43467,"byte_end":43476,"line_start":541,"line_end":541,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43970,"byte_end":43974,"line_start":557,"line_end":557,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43673,"byte_end":43742,"line_start":551,"line_end":551,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43747,"byte_end":43750,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43755,"byte_end":43831,"line_start":553,"line_end":553,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43836,"byte_end":43912,"line_start":554,"line_end":554,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43917,"byte_end":43944,"line_start":555,"line_end":555,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43949,"byte_end":43958,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":419},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45559,"byte_end":45584,"line_start":611,"line_end":611,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45087,"byte_end":45171,"line_start":603,"line_end":603,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45172,"byte_end":45207,"line_start":604,"line_end":604,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45208,"byte_end":45211,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45212,"byte_end":45309,"line_start":606,"line_end":606,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45310,"byte_end":45385,"line_start":607,"line_end":607,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45386,"byte_end":45466,"line_start":608,"line_end":608,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45467,"byte_end":45478,"line_start":609,"line_end":609,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45479,"byte_end":45547,"line_start":610,"line_end":610,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46431,"byte_end":46434,"line_start":634,"line_end":634,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45986,"byte_end":46065,"line_start":625,"line_end":625,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46070,"byte_end":46073,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46078,"byte_end":46150,"line_start":627,"line_end":627,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46155,"byte_end":46187,"line_start":628,"line_end":628,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46192,"byte_end":46195,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46200,"byte_end":46251,"line_start":630,"line_end":630,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46256,"byte_end":46347,"line_start":631,"line_end":631,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46352,"byte_end":46405,"line_start":632,"line_end":632,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46410,"byte_end":46419,"line_start":633,"line_end":633,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47293,"byte_end":47300,"line_start":658,"line_end":658,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46768,"byte_end":46846,"line_start":648,"line_end":648,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46851,"byte_end":46927,"line_start":649,"line_end":649,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46932,"byte_end":46935,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46940,"byte_end":47012,"line_start":651,"line_end":651,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47017,"byte_end":47049,"line_start":652,"line_end":652,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47054,"byte_end":47057,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47062,"byte_end":47113,"line_start":654,"line_end":654,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47118,"byte_end":47209,"line_start":655,"line_end":655,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47214,"byte_end":47267,"line_start":656,"line_end":656,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47272,"byte_end":47281,"line_start":657,"line_end":657,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48673,"byte_end":48684,"line_start":695,"line_end":695,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47883,"byte_end":47934,"line_start":682,"line_end":682,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47939,"byte_end":47942,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47947,"byte_end":48021,"line_start":684,"line_end":684,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48026,"byte_end":48098,"line_start":685,"line_end":685,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48103,"byte_end":48177,"line_start":686,"line_end":686,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48182,"byte_end":48257,"line_start":687,"line_end":687,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48262,"byte_end":48333,"line_start":688,"line_end":688,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48338,"byte_end":48395,"line_start":689,"line_end":689,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48400,"byte_end":48403,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48408,"byte_end":48484,"line_start":691,"line_end":691,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48489,"byte_end":48565,"line_start":692,"line_end":692,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48570,"byte_end":48647,"line_start":693,"line_end":693,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48652,"byte_end":48661,"line_start":694,"line_end":694,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":495},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50880,"byte_end":50889,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50433,"byte_end":50479,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50480,"byte_end":50483,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50484,"byte_end":50560,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50561,"byte_end":50597,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50598,"byte_end":50601,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50602,"byte_end":50614,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50615,"byte_end":50618,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50619,"byte_end":50694,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50695,"byte_end":50774,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50775,"byte_end":50850,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50851,"byte_end":50862,"line_start":30,"line_end":30,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":496},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51195,"byte_end":51199,"line_start":36,"line_end":36,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50896,"byte_end":50939,"line_start":32,"line_end":32,"column_start":5,"column_end":48}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51136,"byte_end":51184,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":497},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51364,"byte_end":51375,"line_start":40,"line_end":40,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51212,"byte_end":51287,"line_start":38,"line_end":38,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51292,"byte_end":51354,"line_start":39,"line_end":39,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51472,"byte_end":51483,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"pub fn lock_shared(&Self)","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51382,"byte_end":51464,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51560,"byte_end":51575,"line_start":46,"line_end":46,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"pub fn try_lock_shared(&Self) -> bool","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51497,"byte_end":51552,"line_start":45,"line_end":45,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51632,"byte_end":51645,"line_start":49,"line_end":49,"column_start":8,"column_end":21},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"pub fn unlock_shared(&Self)","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Releases a shared lock.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51597,"byte_end":51624,"line_start":48,"line_end":48,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51753,"byte_end":51767,"line_start":52,"line_end":52,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"pub fn lock_exclusive(&Self)","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51659,"byte_end":51745,"line_start":51,"line_end":51,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51848,"byte_end":51866,"line_start":55,"line_end":55,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"pub fn try_lock_exclusive(&Self) -> bool","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51781,"byte_end":51840,"line_start":54,"line_end":54,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51927,"byte_end":51943,"line_start":58,"line_end":58,"column_start":8,"column_end":24},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"pub fn unlock_exclusive(&Self)","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51888,"byte_end":51919,"line_start":57,"line_end":57,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":504},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52335,"byte_end":52348,"line_start":67,"line_end":67,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51955,"byte_end":52019,"line_start":61,"line_end":61,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52020,"byte_end":52023,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52024,"byte_end":52104,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52105,"byte_end":52180,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52181,"byte_end":52255,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52256,"byte_end":52317,"line_start":66,"line_end":66,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52430,"byte_end":52448,"line_start":69,"line_end":69,"column_start":8,"column_end":26},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"pub fn unlock_shared_fair(&Self)","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52366,"byte_end":52422,"line_start":68,"line_end":68,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52530,"byte_end":52551,"line_start":72,"line_end":72,"column_start":8,"column_end":29},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"pub fn unlock_exclusive_fair(&Self)","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52462,"byte_end":52522,"line_start":71,"line_end":71,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52862,"byte_end":52873,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"pub fn bump_shared(&Self)","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52565,"byte_end":52638,"line_start":74,"line_end":74,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52643,"byte_end":52646,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52651,"byte_end":52734,"line_start":76,"line_end":76,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52739,"byte_end":52822,"line_start":77,"line_end":77,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52827,"byte_end":52854,"line_start":78,"line_end":78,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53264,"byte_end":53278,"line_start":89,"line_end":89,"column_start":8,"column_end":22},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"pub fn bump_exclusive(&Self)","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52957,"byte_end":53034,"line_start":84,"line_end":84,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53039,"byte_end":53042,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53047,"byte_end":53133,"line_start":86,"line_end":86,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53138,"byte_end":53224,"line_start":87,"line_end":87,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53229,"byte_end":53256,"line_start":88,"line_end":88,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":509},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53495,"byte_end":53513,"line_start":97,"line_end":97,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":510}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53366,"byte_end":53440,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53441,"byte_end":53477,"line_start":96,"line_end":96,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53680,"byte_end":53689,"line_start":100,"line_end":100,"column_start":8,"column_end":17},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"pub fn downgrade(&Self)","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.\n","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53531,"byte_end":53601,"line_start":98,"line_end":98,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53606,"byte_end":53672,"line_start":99,"line_end":99,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":511},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53931,"byte_end":53945,"line_start":107,"line_end":107,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53701,"byte_end":53772,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53773,"byte_end":53776,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53777,"byte_end":53857,"line_start":105,"line_end":105,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53858,"byte_end":53913,"line_start":106,"line_end":106,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":512},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54015,"byte_end":54023,"line_start":109,"line_end":109,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53963,"byte_end":54005,"line_start":108,"line_end":108,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":513},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54083,"byte_end":54090,"line_start":112,"line_end":112,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54030,"byte_end":54073,"line_start":111,"line_end":111,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54170,"byte_end":54189,"line_start":115,"line_end":115,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"pub fn try_lock_shared_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54097,"byte_end":54162,"line_start":114,"line_end":114,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54309,"byte_end":54330,"line_start":118,"line_end":118,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"pub fn try_lock_shared_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54236,"byte_end":54301,"line_start":117,"line_end":117,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54453,"byte_end":54475,"line_start":121,"line_end":121,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"pub fn try_lock_exclusive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54376,"byte_end":54445,"line_start":120,"line_end":120,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54599,"byte_end":54623,"line_start":124,"line_end":124,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"pub fn try_lock_exclusive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54522,"byte_end":54591,"line_start":123,"line_end":123,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":518},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55056,"byte_end":55074,"line_start":134,"line_end":134,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54667,"byte_end":54737,"line_start":127,"line_end":127,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54738,"byte_end":54741,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54742,"byte_end":54797,"line_start":129,"line_end":129,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54798,"byte_end":54873,"line_start":130,"line_end":130,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54874,"byte_end":54945,"line_start":131,"line_end":131,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54946,"byte_end":55020,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55021,"byte_end":55038,"line_start":133,"line_end":133,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55175,"byte_end":55196,"line_start":136,"line_end":136,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"pub fn lock_shared_recursive(&Self)","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55092,"byte_end":55167,"line_start":135,"line_end":135,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55304,"byte_end":55329,"line_start":139,"line_end":139,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"pub fn try_lock_shared_recursive(&Self) -> bool","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55210,"byte_end":55296,"line_start":138,"line_end":138,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":521},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55450,"byte_end":55473,"line_start":143,"line_end":143,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55349,"byte_end":55432,"line_start":142,"line_end":142,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55647,"byte_end":55676,"line_start":146,"line_end":146,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"pub fn try_lock_shared_recursive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":521},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55517,"byte_end":55590,"line_start":144,"line_end":144,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55595,"byte_end":55639,"line_start":145,"line_end":145,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55853,"byte_end":55884,"line_start":150,"line_end":150,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"pub fn try_lock_shared_recursive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":521},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55723,"byte_end":55796,"line_start":148,"line_end":148,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55801,"byte_end":55845,"line_start":149,"line_end":149,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":524},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56260,"byte_end":56276,"line_start":159,"line_end":159,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55928,"byte_end":56006,"line_start":153,"line_end":153,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56007,"byte_end":56037,"line_start":154,"line_end":154,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56038,"byte_end":56041,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56042,"byte_end":56115,"line_start":156,"line_end":156,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56116,"byte_end":56190,"line_start":157,"line_end":157,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56191,"byte_end":56242,"line_start":158,"line_end":158,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56389,"byte_end":56404,"line_start":161,"line_end":161,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"pub fn lock_upgradable(&Self)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56294,"byte_end":56381,"line_start":160,"line_end":160,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56486,"byte_end":56505,"line_start":164,"line_end":164,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"pub fn try_lock_upgradable(&Self) -> bool","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56418,"byte_end":56478,"line_start":163,"line_end":163,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56567,"byte_end":56584,"line_start":167,"line_end":167,"column_start":8,"column_end":25},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"pub fn unlock_upgradable(&Self)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56527,"byte_end":56559,"line_start":166,"line_end":166,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56659,"byte_end":56666,"line_start":170,"line_end":170,"column_start":8,"column_end":15},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"pub fn upgrade(&Self)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56598,"byte_end":56651,"line_start":169,"line_end":169,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56777,"byte_end":56788,"line_start":174,"line_end":174,"column_start":8,"column_end":19},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"pub fn try_upgrade(&Self) -> bool","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56680,"byte_end":56751,"line_start":172,"line_end":172,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56756,"byte_end":56769,"line_start":173,"line_end":173,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":530},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56915,"byte_end":56935,"line_start":179,"line_end":179,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56808,"byte_end":56882,"line_start":177,"line_end":177,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56883,"byte_end":56897,"line_start":178,"line_end":178,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57045,"byte_end":57067,"line_start":181,"line_end":181,"column_start":8,"column_end":30},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"pub fn unlock_upgradable_fair(&Self)","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56976,"byte_end":57037,"line_start":180,"line_end":180,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57391,"byte_end":57406,"line_start":188,"line_end":188,"column_start":8,"column_end":23},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"pub fn bump_upgradable(&Self)","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57081,"byte_end":57159,"line_start":183,"line_end":183,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57164,"byte_end":57167,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57172,"byte_end":57259,"line_start":185,"line_end":185,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57264,"byte_end":57351,"line_start":186,"line_end":186,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57356,"byte_end":57383,"line_start":187,"line_end":187,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":533},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57605,"byte_end":57630,"line_start":196,"line_end":196,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57496,"byte_end":57570,"line_start":194,"line_end":194,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57571,"byte_end":57587,"line_start":195,"line_end":195,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57735,"byte_end":57755,"line_start":198,"line_end":198,"column_start":8,"column_end":28},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"pub fn downgrade_upgradable(&Self)","parent":{"krate":0,"index":533},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57676,"byte_end":57727,"line_start":197,"line_end":197,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57832,"byte_end":57855,"line_start":201,"line_end":201,"column_start":8,"column_end":31},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(&Self)","parent":{"krate":0,"index":533},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57769,"byte_end":57824,"line_start":200,"line_end":200,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":536},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57981,"byte_end":58002,"line_start":206,"line_end":206,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57867,"byte_end":57944,"line_start":204,"line_end":204,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57945,"byte_end":57963,"line_start":205,"line_end":205,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58122,"byte_end":58145,"line_start":208,"line_end":208,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"pub fn try_lock_upgradable_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58044,"byte_end":58114,"line_start":207,"line_end":207,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58270,"byte_end":58295,"line_start":211,"line_end":211,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"pub fn try_lock_upgradable_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58192,"byte_end":58262,"line_start":210,"line_end":210,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58448,"byte_end":58463,"line_start":215,"line_end":215,"column_start":8,"column_end":23},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"pub fn try_upgrade_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58341,"byte_end":58412,"line_start":213,"line_end":213,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58417,"byte_end":58440,"line_start":214,"line_end":214,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58617,"byte_end":58634,"line_start":219,"line_end":219,"column_start":8,"column_end":25},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"pub fn try_upgrade_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58510,"byte_end":58581,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58586,"byte_end":58609,"line_start":218,"line_end":218,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":541},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":59386,"byte_end":59392,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58678,"byte_end":58702,"line_start":222,"line_end":222,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58703,"byte_end":58706,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58707,"byte_end":58784,"line_start":224,"line_end":224,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58785,"byte_end":58864,"line_start":225,"line_end":225,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58865,"byte_end":58944,"line_start":226,"line_end":226,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58945,"byte_end":59003,"line_start":227,"line_end":227,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":59004,"byte_end":59007,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":59008,"byte_end":59085,"line_start":229,"line_end":229,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":59086,"byte_end":59166,"line_start":230,"line_end":230,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":59167,"byte_end":59245,"line_start":231,"line_end":231,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":59246,"byte_end":59324,"line_start":232,"line_end":232,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":59325,"byte_end":59374,"line_start":233,"line_end":233,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60667,"byte_end":60670,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"pub fn new(T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60541,"byte_end":60604,"line_start":282,"line_end":282,"column_start":5,"column_end":68}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60609,"byte_end":60641,"line_start":283,"line_end":283,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60646,"byte_end":60655,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60913,"byte_end":60923,"line_start":295,"line_end":295,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60801,"byte_end":60859,"line_start":292,"line_end":292,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60864,"byte_end":60873,"line_start":293,"line_end":293,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60878,"byte_end":60901,"line_start":294,"line_end":294,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61243,"byte_end":61252,"line_start":307,"line_end":307,"column_start":18,"column_end":27},"name":"const_new","qualname":"<RwLock<R, T>>::const_new","value":"pub const fn const_new(R, T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new new instance of an `RwLock<T>` based on a pre-existing\n `RawRwLock<T>`.","sig":null,"attributes":[{"value":"/ Creates a new new instance of an `RwLock<T>` based on a pre-existing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61018,"byte_end":61090,"line_start":301,"line_end":301,"column_start":5,"column_end":77}},{"value":"/ `RawRwLock<T>`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61095,"byte_end":61114,"line_start":302,"line_end":302,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61119,"byte_end":61122,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ This allows creating a `RwLock<T>` in a constant context on stable","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61127,"byte_end":61197,"line_start":304,"line_end":304,"column_start":5,"column_end":75}},{"value":"/ Rust.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61202,"byte_end":61211,"line_start":305,"line_end":305,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61216,"byte_end":61225,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62579,"byte_end":62583,"line_start":351,"line_end":351,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61971,"byte_end":62047,"line_start":338,"line_end":338,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62052,"byte_end":62081,"line_start":339,"line_end":339,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62086,"byte_end":62089,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62094,"byte_end":62170,"line_start":341,"line_end":341,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62175,"byte_end":62251,"line_start":342,"line_end":342,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62256,"byte_end":62280,"line_start":343,"line_end":343,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62285,"byte_end":62288,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62293,"byte_end":62369,"line_start":345,"line_end":345,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62374,"byte_end":62440,"line_start":346,"line_end":346,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62445,"byte_end":62448,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62453,"byte_end":62525,"line_start":348,"line_end":348,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62530,"byte_end":62553,"line_start":349,"line_end":349,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62558,"byte_end":62567,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63086,"byte_end":63094,"line_start":365,"line_end":365,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62752,"byte_end":62814,"line_start":357,"line_end":357,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62819,"byte_end":62822,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62827,"byte_end":62904,"line_start":359,"line_end":359,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62909,"byte_end":62986,"line_start":360,"line_end":360,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62991,"byte_end":63014,"line_start":361,"line_end":361,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63019,"byte_end":63022,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63027,"byte_end":63060,"line_start":363,"line_end":363,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63065,"byte_end":63074,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63713,"byte_end":63718,"line_start":383,"line_end":383,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63337,"byte_end":63410,"line_start":374,"line_end":374,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63415,"byte_end":63451,"line_start":375,"line_end":375,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63456,"byte_end":63459,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63464,"byte_end":63534,"line_start":377,"line_end":377,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63539,"byte_end":63577,"line_start":378,"line_end":378,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63582,"byte_end":63585,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63590,"byte_end":63665,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63670,"byte_end":63687,"line_start":381,"line_end":381,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63692,"byte_end":63701,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64217,"byte_end":64226,"line_start":397,"line_end":397,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63892,"byte_end":63955,"line_start":389,"line_end":389,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63960,"byte_end":63963,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63968,"byte_end":64044,"line_start":391,"line_end":391,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64049,"byte_end":64122,"line_start":392,"line_end":392,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64127,"byte_end":64145,"line_start":393,"line_end":393,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64150,"byte_end":64153,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64158,"byte_end":64191,"line_start":395,"line_end":395,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64196,"byte_end":64205,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64722,"byte_end":64729,"line_start":411,"line_end":411,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64474,"byte_end":64529,"line_start":406,"line_end":406,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64534,"byte_end":64537,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64542,"byte_end":64618,"line_start":408,"line_end":408,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64623,"byte_end":64696,"line_start":409,"line_end":409,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64701,"byte_end":64710,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65336,"byte_end":65353,"line_start":427,"line_end":427,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"pub unsafe fn force_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64805,"byte_end":64838,"line_start":415,"line_end":415,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64843,"byte_end":64846,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64851,"byte_end":64925,"line_start":417,"line_end":417,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64930,"byte_end":65005,"line_start":418,"line_end":418,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65010,"byte_end":65031,"line_start":419,"line_end":419,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65036,"byte_end":65039,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65044,"byte_end":65056,"line_start":421,"line_end":421,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65061,"byte_end":65064,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65069,"byte_end":65143,"line_start":423,"line_end":423,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65148,"byte_end":65222,"line_start":424,"line_end":424,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65227,"byte_end":65303,"line_start":425,"line_end":425,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65308,"byte_end":65317,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65944,"byte_end":65962,"line_start":443,"line_end":443,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"pub unsafe fn force_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65408,"byte_end":65442,"line_start":431,"line_end":431,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65447,"byte_end":65450,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65455,"byte_end":65529,"line_start":433,"line_end":433,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65534,"byte_end":65610,"line_start":434,"line_end":434,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65615,"byte_end":65636,"line_start":435,"line_end":435,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65641,"byte_end":65644,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65649,"byte_end":65661,"line_start":437,"line_end":437,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65666,"byte_end":65669,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65674,"byte_end":65748,"line_start":439,"line_end":439,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65753,"byte_end":65828,"line_start":440,"line_end":440,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65833,"byte_end":65911,"line_start":441,"line_end":441,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65916,"byte_end":65925,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66428,"byte_end":66431,"line_start":457,"line_end":457,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66020,"byte_end":66077,"line_start":447,"line_end":447,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66082,"byte_end":66085,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66090,"byte_end":66166,"line_start":449,"line_end":449,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66171,"byte_end":66225,"line_start":450,"line_end":450,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66230,"byte_end":66253,"line_start":451,"line_end":451,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66258,"byte_end":66261,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66266,"byte_end":66278,"line_start":453,"line_end":453,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66283,"byte_end":66286,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66291,"byte_end":66358,"line_start":455,"line_end":455,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66363,"byte_end":66409,"line_start":456,"line_end":456,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67087,"byte_end":67109,"line_start":475,"line_end":475,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"pub unsafe fn force_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66527,"byte_end":66589,"line_start":463,"line_end":463,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66594,"byte_end":66597,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66602,"byte_end":66676,"line_start":465,"line_end":465,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66681,"byte_end":66756,"line_start":466,"line_end":466,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66761,"byte_end":66782,"line_start":467,"line_end":467,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66787,"byte_end":66790,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66795,"byte_end":66807,"line_start":469,"line_end":469,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66812,"byte_end":66815,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66820,"byte_end":66894,"line_start":471,"line_end":471,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66899,"byte_end":66973,"line_start":472,"line_end":472,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66978,"byte_end":67054,"line_start":473,"line_end":473,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67059,"byte_end":67068,"line_start":474,"line_end":474,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67734,"byte_end":67757,"line_start":491,"line_end":491,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"pub unsafe fn force_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67169,"byte_end":67232,"line_start":479,"line_end":479,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67237,"byte_end":67240,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67245,"byte_end":67319,"line_start":481,"line_end":481,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67324,"byte_end":67400,"line_start":482,"line_end":482,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67405,"byte_end":67426,"line_start":483,"line_end":483,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67431,"byte_end":67434,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67439,"byte_end":67451,"line_start":485,"line_end":485,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67456,"byte_end":67459,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67464,"byte_end":67538,"line_start":487,"line_end":487,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67543,"byte_end":67618,"line_start":488,"line_end":488,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67623,"byte_end":67701,"line_start":489,"line_end":489,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67706,"byte_end":67715,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68209,"byte_end":68221,"line_start":504,"line_end":504,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"pub fn try_read_for(&Self, R::Duration) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67872,"byte_end":67949,"line_start":497,"line_end":497,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67954,"byte_end":67969,"line_start":498,"line_end":498,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67974,"byte_end":67977,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67982,"byte_end":68053,"line_start":500,"line_end":500,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68058,"byte_end":68129,"line_start":501,"line_end":501,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68134,"byte_end":68183,"line_start":502,"line_end":502,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68188,"byte_end":68197,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68834,"byte_end":68848,"line_start":520,"line_end":520,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"pub fn try_read_until(&Self, R::Instant) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68497,"byte_end":68574,"line_start":513,"line_end":513,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68579,"byte_end":68594,"line_start":514,"line_end":514,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68599,"byte_end":68602,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68607,"byte_end":68678,"line_start":516,"line_end":516,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68683,"byte_end":68754,"line_start":517,"line_end":517,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68759,"byte_end":68808,"line_start":518,"line_end":518,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68813,"byte_end":68822,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69469,"byte_end":69482,"line_start":536,"line_end":536,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"pub fn try_write_for(&Self, R::Duration) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69125,"byte_end":69198,"line_start":529,"line_end":529,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69203,"byte_end":69226,"line_start":530,"line_end":530,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69231,"byte_end":69234,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69239,"byte_end":69310,"line_start":532,"line_end":532,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69315,"byte_end":69386,"line_start":533,"line_end":533,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69391,"byte_end":69443,"line_start":534,"line_end":534,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69448,"byte_end":69457,"line_start":535,"line_end":535,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70107,"byte_end":70122,"line_start":552,"line_end":552,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"pub fn try_write_until(&Self, R::Instant) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69763,"byte_end":69836,"line_start":545,"line_end":545,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69841,"byte_end":69864,"line_start":546,"line_end":546,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69869,"byte_end":69872,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69877,"byte_end":69948,"line_start":548,"line_end":548,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69953,"byte_end":70024,"line_start":549,"line_end":549,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70029,"byte_end":70081,"line_start":550,"line_end":550,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70086,"byte_end":70095,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71253,"byte_end":71267,"line_start":579,"line_end":579,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70460,"byte_end":70536,"line_start":563,"line_end":563,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70541,"byte_end":70570,"line_start":564,"line_end":564,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70575,"byte_end":70578,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70583,"byte_end":70659,"line_start":566,"line_end":566,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70664,"byte_end":70740,"line_start":567,"line_end":567,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70745,"byte_end":70769,"line_start":568,"line_end":568,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70774,"byte_end":70777,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70782,"byte_end":70857,"line_start":570,"line_end":570,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70862,"byte_end":70937,"line_start":571,"line_end":571,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70942,"byte_end":71013,"line_start":572,"line_end":572,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71018,"byte_end":71092,"line_start":573,"line_end":573,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71097,"byte_end":71114,"line_start":574,"line_end":574,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71119,"byte_end":71122,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71127,"byte_end":71199,"line_start":576,"line_end":576,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71204,"byte_end":71227,"line_start":577,"line_end":577,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71232,"byte_end":71241,"line_start":578,"line_end":578,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71951,"byte_end":71969,"line_start":596,"line_end":596,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71446,"byte_end":71508,"line_start":585,"line_end":585,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71513,"byte_end":71516,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71521,"byte_end":71598,"line_start":587,"line_end":587,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71603,"byte_end":71680,"line_start":588,"line_end":588,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71685,"byte_end":71708,"line_start":589,"line_end":589,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71713,"byte_end":71716,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71721,"byte_end":71797,"line_start":591,"line_end":591,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71802,"byte_end":71879,"line_start":592,"line_end":592,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71884,"byte_end":71887,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71892,"byte_end":71925,"line_start":594,"line_end":594,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71930,"byte_end":71939,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72816,"byte_end":72838,"line_start":618,"line_end":618,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, R::Duration)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72283,"byte_end":72360,"line_start":607,"line_end":607,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72365,"byte_end":72380,"line_start":608,"line_end":608,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72385,"byte_end":72388,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72393,"byte_end":72464,"line_start":610,"line_end":610,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72469,"byte_end":72540,"line_start":611,"line_end":611,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72545,"byte_end":72594,"line_start":612,"line_end":612,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72599,"byte_end":72602,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72607,"byte_end":72680,"line_start":614,"line_end":614,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72685,"byte_end":72752,"line_start":615,"line_end":615,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72757,"byte_end":72790,"line_start":616,"line_end":616,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72795,"byte_end":72804,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73484,"byte_end":73508,"line_start":637,"line_end":637,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, R::Instant)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73147,"byte_end":73224,"line_start":630,"line_end":630,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73229,"byte_end":73244,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73249,"byte_end":73252,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73257,"byte_end":73328,"line_start":633,"line_end":633,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73333,"byte_end":73404,"line_start":634,"line_end":634,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73409,"byte_end":73458,"line_start":635,"line_end":635,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73463,"byte_end":73472,"line_start":636,"line_end":636,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74636,"byte_end":74651,"line_start":672,"line_end":672,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74158,"byte_end":74238,"line_start":662,"line_end":662,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74243,"byte_end":74272,"line_start":663,"line_end":663,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74277,"byte_end":74280,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74285,"byte_end":74364,"line_start":665,"line_end":665,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74369,"byte_end":74447,"line_start":666,"line_end":666,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74452,"byte_end":74497,"line_start":667,"line_end":667,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74502,"byte_end":74505,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74510,"byte_end":74582,"line_start":669,"line_end":669,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74587,"byte_end":74610,"line_start":670,"line_end":670,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74615,"byte_end":74624,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75178,"byte_end":75197,"line_start":686,"line_end":686,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74840,"byte_end":74906,"line_start":678,"line_end":678,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74911,"byte_end":74914,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74919,"byte_end":74996,"line_start":680,"line_end":680,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75001,"byte_end":75078,"line_start":681,"line_end":681,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75083,"byte_end":75106,"line_start":682,"line_end":682,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75111,"byte_end":75114,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75119,"byte_end":75152,"line_start":684,"line_end":684,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75157,"byte_end":75166,"line_start":685,"line_end":685,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75860,"byte_end":75883,"line_start":704,"line_end":704,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, R::Duration)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75519,"byte_end":75600,"line_start":697,"line_end":697,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75605,"byte_end":75620,"line_start":698,"line_end":698,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75625,"byte_end":75628,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75633,"byte_end":75704,"line_start":700,"line_end":700,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75709,"byte_end":75780,"line_start":701,"line_end":701,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75785,"byte_end":75834,"line_start":702,"line_end":702,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75839,"byte_end":75848,"line_start":703,"line_end":703,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76543,"byte_end":76568,"line_start":723,"line_end":723,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, R::Instant)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76202,"byte_end":76283,"line_start":716,"line_end":716,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76288,"byte_end":76303,"line_start":717,"line_end":717,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76308,"byte_end":76311,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76316,"byte_end":76387,"line_start":719,"line_end":719,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76392,"byte_end":76463,"line_start":720,"line_end":720,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76468,"byte_end":76517,"line_start":721,"line_end":721,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76522,"byte_end":76531,"line_start":722,"line_end":722,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":623},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78041,"byte_end":78056,"line_start":773,"line_end":773,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77883,"byte_end":77955,"line_start":770,"line_end":770,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77956,"byte_end":77968,"line_start":771,"line_end":771,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77969,"byte_end":78029,"line_start":772,"line_end":772,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78422,"byte_end":78428,"line_start":782,"line_end":782,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78344,"byte_end":78410,"line_start":781,"line_end":781,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78908,"byte_end":78911,"line_start":795,"line_end":795,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78489,"byte_end":78563,"line_start":786,"line_end":786,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78568,"byte_end":78571,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78576,"byte_end":78638,"line_start":788,"line_end":788,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78643,"byte_end":78674,"line_start":789,"line_end":789,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78679,"byte_end":78682,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78687,"byte_end":78738,"line_start":791,"line_end":791,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78743,"byte_end":78824,"line_start":792,"line_end":792,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78829,"byte_end":78882,"line_start":793,"line_end":793,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78887,"byte_end":78896,"line_start":794,"line_end":794,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79755,"byte_end":79762,"line_start":819,"line_end":819,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79255,"byte_end":79329,"line_start":809,"line_end":809,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79334,"byte_end":79410,"line_start":810,"line_end":810,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79415,"byte_end":79418,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79423,"byte_end":79485,"line_start":812,"line_end":812,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79490,"byte_end":79521,"line_start":813,"line_end":813,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79526,"byte_end":79529,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79534,"byte_end":79585,"line_start":815,"line_end":815,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79590,"byte_end":79671,"line_start":816,"line_end":816,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79676,"byte_end":79729,"line_start":817,"line_end":817,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79734,"byte_end":79743,"line_start":818,"line_end":818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80514,"byte_end":80522,"line_start":843,"line_end":843,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80217,"byte_end":80284,"line_start":836,"line_end":836,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80289,"byte_end":80292,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80297,"byte_end":80349,"line_start":838,"line_end":838,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80354,"byte_end":80357,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80362,"byte_end":80430,"line_start":840,"line_end":840,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80435,"byte_end":80488,"line_start":841,"line_end":841,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80493,"byte_end":80502,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81580,"byte_end":81591,"line_start":867,"line_end":867,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80779,"byte_end":80833,"line_start":854,"line_end":854,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80838,"byte_end":80841,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80846,"byte_end":80920,"line_start":856,"line_end":856,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80925,"byte_end":81000,"line_start":857,"line_end":857,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81005,"byte_end":81078,"line_start":858,"line_end":858,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81083,"byte_end":81152,"line_start":859,"line_end":859,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81157,"byte_end":81234,"line_start":860,"line_end":860,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81239,"byte_end":81306,"line_start":861,"line_end":861,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81311,"byte_end":81314,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81319,"byte_end":81395,"line_start":863,"line_end":863,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81400,"byte_end":81476,"line_start":864,"line_end":864,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81481,"byte_end":81554,"line_start":865,"line_end":865,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81559,"byte_end":81568,"line_start":866,"line_end":866,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81978,"byte_end":81991,"line_start":879,"line_end":879,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81681,"byte_end":81748,"line_start":872,"line_end":872,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81753,"byte_end":81756,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81761,"byte_end":81813,"line_start":874,"line_end":874,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81818,"byte_end":81821,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81826,"byte_end":81894,"line_start":876,"line_end":876,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81899,"byte_end":81952,"line_start":877,"line_end":877,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81957,"byte_end":81966,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82475,"byte_end":82479,"line_start":894,"line_end":894,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82175,"byte_end":82247,"line_start":888,"line_end":888,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82252,"byte_end":82255,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82260,"byte_end":82336,"line_start":890,"line_end":890,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82341,"byte_end":82417,"line_start":891,"line_end":891,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82422,"byte_end":82449,"line_start":892,"line_end":892,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82454,"byte_end":82463,"line_start":893,"line_end":893,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":677},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83613,"byte_end":83629,"line_start":934,"line_end":934,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83451,"byte_end":83527,"line_start":931,"line_end":931,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83528,"byte_end":83540,"line_start":932,"line_end":932,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83541,"byte_end":83601,"line_start":933,"line_end":933,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84001,"byte_end":84007,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83923,"byte_end":83989,"line_start":942,"line_end":942,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84490,"byte_end":84493,"line_start":956,"line_end":956,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84068,"byte_end":84143,"line_start":947,"line_end":947,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84148,"byte_end":84151,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84156,"byte_end":84219,"line_start":949,"line_end":949,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84224,"byte_end":84255,"line_start":950,"line_end":950,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84260,"byte_end":84263,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84268,"byte_end":84319,"line_start":952,"line_end":952,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84324,"byte_end":84406,"line_start":953,"line_end":953,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84411,"byte_end":84464,"line_start":954,"line_end":954,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84469,"byte_end":84478,"line_start":955,"line_end":955,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85354,"byte_end":85361,"line_start":980,"line_end":980,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84851,"byte_end":84926,"line_start":970,"line_end":970,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84931,"byte_end":85007,"line_start":971,"line_end":971,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85012,"byte_end":85015,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85020,"byte_end":85083,"line_start":973,"line_end":973,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85088,"byte_end":85119,"line_start":974,"line_end":974,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85124,"byte_end":85127,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85132,"byte_end":85183,"line_start":976,"line_end":976,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85188,"byte_end":85270,"line_start":977,"line_end":977,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85275,"byte_end":85328,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85333,"byte_end":85342,"line_start":979,"line_end":979,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86062,"byte_end":86070,"line_start":1002,"line_end":1002,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85830,"byte_end":85897,"line_start":997,"line_end":997,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85902,"byte_end":85905,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85910,"byte_end":85978,"line_start":999,"line_end":999,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85983,"byte_end":86036,"line_start":1000,"line_end":1000,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86041,"byte_end":86050,"line_start":1001,"line_end":1001,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86681,"byte_end":86690,"line_start":1019,"line_end":1019,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86339,"byte_end":86415,"line_start":1013,"line_end":1013,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86420,"byte_end":86485,"line_start":1014,"line_end":1014,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86490,"byte_end":86493,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86498,"byte_end":86571,"line_start":1016,"line_end":1016,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86576,"byte_end":86649,"line_start":1017,"line_end":1017,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86654,"byte_end":86669,"line_start":1018,"line_end":1018,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87365,"byte_end":87388,"line_start":1037,"line_end":1037,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(Self) -> RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87011,"byte_end":87099,"line_start":1031,"line_end":1031,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87104,"byte_end":87169,"line_start":1032,"line_end":1032,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87174,"byte_end":87177,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87182,"byte_end":87255,"line_start":1034,"line_end":1034,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87260,"byte_end":87333,"line_start":1035,"line_end":1035,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87338,"byte_end":87353,"line_start":1036,"line_end":1036,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88533,"byte_end":88544,"line_start":1062,"line_end":1062,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87731,"byte_end":87785,"line_start":1049,"line_end":1049,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87790,"byte_end":87793,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87798,"byte_end":87872,"line_start":1051,"line_end":1051,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87877,"byte_end":87952,"line_start":1052,"line_end":1052,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87957,"byte_end":88030,"line_start":1053,"line_end":1053,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88035,"byte_end":88104,"line_start":1054,"line_end":1054,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88109,"byte_end":88186,"line_start":1055,"line_end":1055,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88191,"byte_end":88258,"line_start":1056,"line_end":1056,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88263,"byte_end":88266,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88271,"byte_end":88347,"line_start":1058,"line_end":1058,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88352,"byte_end":88428,"line_start":1059,"line_end":1059,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88433,"byte_end":88507,"line_start":1060,"line_end":1060,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88512,"byte_end":88521,"line_start":1061,"line_end":1061,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88934,"byte_end":88947,"line_start":1074,"line_end":1074,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88637,"byte_end":88704,"line_start":1067,"line_end":1067,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88709,"byte_end":88712,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88717,"byte_end":88769,"line_start":1069,"line_end":1069,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88774,"byte_end":88777,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88782,"byte_end":88850,"line_start":1071,"line_end":1071,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88855,"byte_end":88908,"line_start":1072,"line_end":1072,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88913,"byte_end":88922,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89438,"byte_end":89442,"line_start":1089,"line_end":1089,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89137,"byte_end":89209,"line_start":1083,"line_end":1083,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89214,"byte_end":89217,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89222,"byte_end":89298,"line_start":1085,"line_end":1085,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89303,"byte_end":89380,"line_start":1086,"line_end":1086,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89385,"byte_end":89412,"line_start":1087,"line_end":1087,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89417,"byte_end":89426,"line_start":1088,"line_end":1088,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":746},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90784,"byte_end":90809,"line_start":1136,"line_end":1136,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90622,"byte_end":90698,"line_start":1133,"line_end":1133,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90699,"byte_end":90711,"line_start":1134,"line_end":1134,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90712,"byte_end":90772,"line_start":1135,"line_end":1135,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91221,"byte_end":91227,"line_start":1148,"line_end":1148,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91143,"byte_end":91209,"line_start":1147,"line_end":1147,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91520,"byte_end":91528,"line_start":1157,"line_end":1157,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91288,"byte_end":91355,"line_start":1152,"line_end":1152,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91360,"byte_end":91363,"line_start":1153,"line_end":1153,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91368,"byte_end":91436,"line_start":1154,"line_end":1154,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91441,"byte_end":91494,"line_start":1155,"line_end":1155,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91499,"byte_end":91508,"line_start":1156,"line_end":1156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91870,"byte_end":91877,"line_start":1168,"line_end":1168,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91715,"byte_end":91796,"line_start":1166,"line_end":1166,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91801,"byte_end":91858,"line_start":1167,"line_end":1167,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92304,"byte_end":92315,"line_start":1181,"line_end":1181,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92107,"byte_end":92191,"line_start":1178,"line_end":1178,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92196,"byte_end":92199,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92204,"byte_end":92292,"line_start":1180,"line_end":1180,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93547,"byte_end":93558,"line_start":1209,"line_end":1209,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92736,"byte_end":92790,"line_start":1196,"line_end":1196,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92795,"byte_end":92798,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92803,"byte_end":92877,"line_start":1198,"line_end":1198,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92882,"byte_end":92957,"line_start":1199,"line_end":1199,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92962,"byte_end":93035,"line_start":1200,"line_end":1200,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93040,"byte_end":93109,"line_start":1201,"line_end":1201,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93114,"byte_end":93191,"line_start":1202,"line_end":1202,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93196,"byte_end":93263,"line_start":1203,"line_end":1203,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93268,"byte_end":93271,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93276,"byte_end":93352,"line_start":1205,"line_end":1205,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93357,"byte_end":93433,"line_start":1206,"line_end":1206,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93438,"byte_end":93521,"line_start":1207,"line_end":1207,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93526,"byte_end":93535,"line_start":1208,"line_end":1208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93949,"byte_end":93962,"line_start":1221,"line_end":1221,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93652,"byte_end":93719,"line_start":1214,"line_end":1214,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93724,"byte_end":93727,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93732,"byte_end":93784,"line_start":1216,"line_end":1216,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93789,"byte_end":93792,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93797,"byte_end":93865,"line_start":1218,"line_end":1218,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93870,"byte_end":93923,"line_start":1219,"line_end":1219,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93928,"byte_end":93937,"line_start":1220,"line_end":1220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94465,"byte_end":94469,"line_start":1236,"line_end":1236,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94154,"byte_end":94226,"line_start":1230,"line_end":1230,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94231,"byte_end":94234,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94239,"byte_end":94315,"line_start":1232,"line_end":1232,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94320,"byte_end":94407,"line_start":1233,"line_end":1233,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94412,"byte_end":94439,"line_start":1234,"line_end":1234,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94444,"byte_end":94453,"line_start":1235,"line_end":1235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95010,"byte_end":95019,"line_start":1249,"line_end":1249,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94637,"byte_end":94715,"line_start":1242,"line_end":1242,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94720,"byte_end":94796,"line_start":1243,"line_end":1243,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94801,"byte_end":94814,"line_start":1244,"line_end":1244,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94819,"byte_end":94822,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94827,"byte_end":94900,"line_start":1246,"line_end":1246,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94905,"byte_end":94978,"line_start":1247,"line_end":1247,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94983,"byte_end":94998,"line_start":1248,"line_end":1248,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95611,"byte_end":95626,"line_start":1266,"line_end":1266,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, R::Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95356,"byte_end":95428,"line_start":1261,"line_end":1261,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95433,"byte_end":95476,"line_start":1262,"line_end":1262,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95481,"byte_end":95484,"line_start":1263,"line_end":1263,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95489,"byte_end":95560,"line_start":1264,"line_end":1264,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95565,"byte_end":95599,"line_start":1265,"line_end":1265,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96277,"byte_end":96294,"line_start":1288,"line_end":1288,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, R::Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96008,"byte_end":96080,"line_start":1282,"line_end":1282,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96085,"byte_end":96128,"line_start":1283,"line_end":1283,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96133,"byte_end":96136,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96141,"byte_end":96212,"line_start":1285,"line_end":1285,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96217,"byte_end":96251,"line_start":1286,"line_end":1286,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96256,"byte_end":96265,"line_start":1287,"line_end":1287,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":807},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98139,"byte_end":98160,"line_start":1350,"line_end":1350,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97683,"byte_end":97767,"line_start":1342,"line_end":1342,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97768,"byte_end":97803,"line_start":1343,"line_end":1343,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97804,"byte_end":97807,"line_start":1344,"line_end":1344,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97808,"byte_end":97897,"line_start":1345,"line_end":1345,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97898,"byte_end":97973,"line_start":1346,"line_end":1346,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97974,"byte_end":98054,"line_start":1347,"line_end":1347,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98055,"byte_end":98066,"line_start":1348,"line_end":1348,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98067,"byte_end":98127,"line_start":1349,"line_end":1349,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99006,"byte_end":99009,"line_start":1372,"line_end":1372,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98575,"byte_end":98649,"line_start":1363,"line_end":1363,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98654,"byte_end":98657,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98662,"byte_end":98730,"line_start":1365,"line_end":1365,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98735,"byte_end":98766,"line_start":1366,"line_end":1366,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98771,"byte_end":98774,"line_start":1367,"line_end":1367,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98779,"byte_end":98830,"line_start":1368,"line_end":1368,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98835,"byte_end":98922,"line_start":1369,"line_end":1369,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98927,"byte_end":98980,"line_start":1370,"line_end":1370,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98985,"byte_end":98994,"line_start":1371,"line_end":1371,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99844,"byte_end":99851,"line_start":1396,"line_end":1396,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99332,"byte_end":99406,"line_start":1386,"line_end":1386,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99411,"byte_end":99487,"line_start":1387,"line_end":1387,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99492,"byte_end":99495,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99500,"byte_end":99568,"line_start":1389,"line_end":1389,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99573,"byte_end":99604,"line_start":1390,"line_end":1390,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99609,"byte_end":99612,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99617,"byte_end":99668,"line_start":1392,"line_end":1392,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99673,"byte_end":99760,"line_start":1393,"line_end":1393,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99765,"byte_end":99818,"line_start":1394,"line_end":1394,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99823,"byte_end":99832,"line_start":1395,"line_end":1395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101176,"byte_end":101187,"line_start":1428,"line_end":1428,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100369,"byte_end":100423,"line_start":1415,"line_end":1415,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100428,"byte_end":100431,"line_start":1416,"line_end":1416,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100436,"byte_end":100510,"line_start":1417,"line_end":1417,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100515,"byte_end":100590,"line_start":1418,"line_end":1418,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100595,"byte_end":100668,"line_start":1419,"line_end":1419,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100673,"byte_end":100742,"line_start":1420,"line_end":1420,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100747,"byte_end":100824,"line_start":1421,"line_end":1421,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100829,"byte_end":100896,"line_start":1422,"line_end":1422,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100901,"byte_end":100904,"line_start":1423,"line_end":1423,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100909,"byte_end":100985,"line_start":1424,"line_end":1424,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100990,"byte_end":101066,"line_start":1425,"line_end":1425,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101071,"byte_end":101150,"line_start":1426,"line_end":1426,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101155,"byte_end":101164,"line_start":1427,"line_end":1427,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":858},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102657,"byte_end":102679,"line_start":1479,"line_end":1479,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102197,"byte_end":102283,"line_start":1471,"line_end":1471,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102284,"byte_end":102319,"line_start":1472,"line_end":1472,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102320,"byte_end":102323,"line_start":1473,"line_end":1473,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102324,"byte_end":102415,"line_start":1474,"line_end":1474,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102416,"byte_end":102491,"line_start":1475,"line_end":1475,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102492,"byte_end":102572,"line_start":1476,"line_end":1476,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102573,"byte_end":102584,"line_start":1477,"line_end":1477,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102585,"byte_end":102645,"line_start":1478,"line_end":1478,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103538,"byte_end":103541,"line_start":1504,"line_end":1504,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103104,"byte_end":103179,"line_start":1495,"line_end":1495,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103184,"byte_end":103187,"line_start":1496,"line_end":1496,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103192,"byte_end":103261,"line_start":1497,"line_end":1497,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103266,"byte_end":103297,"line_start":1498,"line_end":1498,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103302,"byte_end":103305,"line_start":1499,"line_end":1499,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103310,"byte_end":103361,"line_start":1500,"line_end":1500,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103366,"byte_end":103454,"line_start":1501,"line_end":1501,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103459,"byte_end":103512,"line_start":1502,"line_end":1502,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103517,"byte_end":103526,"line_start":1503,"line_end":1503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104393,"byte_end":104400,"line_start":1528,"line_end":1528,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103878,"byte_end":103953,"line_start":1518,"line_end":1518,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103958,"byte_end":104034,"line_start":1519,"line_end":1519,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104039,"byte_end":104042,"line_start":1520,"line_end":1520,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104047,"byte_end":104116,"line_start":1521,"line_end":1521,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104121,"byte_end":104152,"line_start":1522,"line_end":1522,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104157,"byte_end":104160,"line_start":1523,"line_end":1523,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104165,"byte_end":104216,"line_start":1524,"line_end":1524,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104221,"byte_end":104309,"line_start":1525,"line_end":1525,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104314,"byte_end":104367,"line_start":1526,"line_end":1526,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104372,"byte_end":104381,"line_start":1527,"line_end":1527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105422,"byte_end":105431,"line_start":1557,"line_end":1557,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<MappedRwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> MappedRwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104938,"byte_end":105014,"line_start":1547,"line_end":1547,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105019,"byte_end":105084,"line_start":1548,"line_end":1548,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105089,"byte_end":105092,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105097,"byte_end":105170,"line_start":1550,"line_end":1550,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105175,"byte_end":105248,"line_start":1551,"line_end":1551,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105253,"byte_end":105268,"line_start":1552,"line_end":1552,"column_start":5,"column_end":20}},{"value":"deprecated(since = \"0.3.3\", note =\n             \"This function is unsound and will be removed in the future, see issue #198\")","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105273,"byte_end":105410,"line_start":1553,"line_end":1556,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106595,"byte_end":106606,"line_start":1584,"line_end":1584,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105787,"byte_end":105841,"line_start":1571,"line_end":1571,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105846,"byte_end":105849,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105854,"byte_end":105928,"line_start":1573,"line_end":1573,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105933,"byte_end":106008,"line_start":1574,"line_end":1574,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106013,"byte_end":106086,"line_start":1575,"line_end":1575,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106091,"byte_end":106160,"line_start":1576,"line_end":1576,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106165,"byte_end":106242,"line_start":1577,"line_end":1577,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106247,"byte_end":106314,"line_start":1578,"line_end":1578,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106319,"byte_end":106322,"line_start":1579,"line_end":1579,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106327,"byte_end":106403,"line_start":1580,"line_end":1580,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106408,"byte_end":106484,"line_start":1581,"line_end":1581,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106489,"byte_end":106569,"line_start":1582,"line_end":1582,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106574,"byte_end":106583,"line_start":1583,"line_end":1583,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7930,"byte_end":7935,"line_start":103,"line_end":103,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8004,"byte_end":8009,"line_start":104,"line_end":104,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8041,"byte_end":8046,"line_start":106,"line_end":106,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8724,"byte_end":8729,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9096,"byte_end":9101,"line_start":147,"line_end":147,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11954,"byte_end":11959,"line_start":232,"line_end":232,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12611,"byte_end":12616,"line_start":250,"line_end":250,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13817,"byte_end":13822,"line_start":282,"line_end":282,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13960,"byte_end":13965,"line_start":289,"line_end":289,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":14111,"byte_end":14116,"line_start":296,"line_end":296,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":14405,"byte_end":14422,"line_start":302,"line_end":302,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15915,"byte_end":15925,"line_start":356,"line_end":356,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15983,"byte_end":15993,"line_start":358,"line_end":358,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18289,"byte_end":18299,"line_start":429,"line_end":429,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20073,"byte_end":20083,"line_start":475,"line_end":475,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20267,"byte_end":20277,"line_start":483,"line_end":483,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20452,"byte_end":20462,"line_start":490,"line_end":490,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20627,"byte_end":20637,"line_start":497,"line_end":497,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20833,"byte_end":20843,"line_start":503,"line_end":503,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21709,"byte_end":21725,"line_start":527,"line_end":527,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21799,"byte_end":21815,"line_start":530,"line_end":530,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21905,"byte_end":21921,"line_start":535,"line_end":535,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23675,"byte_end":23691,"line_start":587,"line_end":587,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24627,"byte_end":24643,"line_start":607,"line_end":607,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24815,"byte_end":24831,"line_start":615,"line_end":615,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24994,"byte_end":25010,"line_start":622,"line_end":622,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":25169,"byte_end":25185,"line_start":629,"line_end":629,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":25385,"byte_end":25401,"line_start":636,"line_end":636,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27394,"byte_end":27411,"line_start":57,"line_end":57,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":28640,"byte_end":28657,"line_start":103,"line_end":103,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29263,"byte_end":29280,"line_start":125,"line_end":125,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30239,"byte_end":30253,"line_start":154,"line_end":154,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30353,"byte_end":30367,"line_start":158,"line_end":158,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30419,"byte_end":30433,"line_start":162,"line_end":162,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31547,"byte_end":31561,"line_start":200,"line_end":200,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32231,"byte_end":32245,"line_start":220,"line_end":220,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35308,"byte_end":35322,"line_start":306,"line_end":306,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36011,"byte_end":36025,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37269,"byte_end":37283,"line_start":356,"line_end":356,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37461,"byte_end":37475,"line_start":363,"line_end":363,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37661,"byte_end":37675,"line_start":370,"line_end":370,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":38027,"byte_end":38044,"line_start":379,"line_end":379,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39692,"byte_end":39711,"line_start":436,"line_end":436,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39794,"byte_end":39813,"line_start":440,"line_end":440,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42276,"byte_end":42295,"line_start":515,"line_end":515,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44108,"byte_end":44127,"line_start":563,"line_end":563,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44337,"byte_end":44356,"line_start":573,"line_end":573,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44551,"byte_end":44570,"line_start":582,"line_end":582,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44794,"byte_end":44813,"line_start":590,"line_end":590,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45829,"byte_end":45854,"line_start":618,"line_end":618,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45941,"byte_end":45966,"line_start":623,"line_end":623,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47838,"byte_end":47863,"line_start":680,"line_end":680,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48836,"byte_end":48861,"line_start":702,"line_end":702,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49057,"byte_end":49082,"line_start":712,"line_end":712,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49269,"byte_end":49294,"line_start":721,"line_end":721,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49518,"byte_end":49543,"line_start":729,"line_end":729,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60139,"byte_end":60145,"line_start":268,"line_end":268,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60222,"byte_end":60228,"line_start":269,"line_end":269,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60261,"byte_end":60267,"line_start":271,"line_end":271,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60999,"byte_end":61005,"line_start":300,"line_end":300,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61429,"byte_end":61435,"line_start":315,"line_end":315,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66508,"byte_end":66514,"line_start":462,"line_end":462,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67853,"byte_end":67859,"line_start":496,"line_end":496,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70441,"byte_end":70447,"line_start":562,"line_end":562,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72264,"byte_end":72270,"line_start":606,"line_end":606,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73853,"byte_end":73859,"line_start":650,"line_end":650,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75500,"byte_end":75506,"line_start":696,"line_end":696,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76938,"byte_end":76944,"line_start":736,"line_end":736,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77085,"byte_end":77091,"line_start":743,"line_end":743,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77240,"byte_end":77246,"line_start":750,"line_end":750,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77536,"byte_end":77553,"line_start":756,"line_end":756,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78238,"byte_end":78253,"line_start":778,"line_end":778,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78312,"byte_end":78327,"line_start":780,"line_end":780,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80747,"byte_end":80762,"line_start":853,"line_end":853,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82595,"byte_end":82610,"line_start":899,"line_end":899,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82792,"byte_end":82807,"line_start":907,"line_end":907,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82981,"byte_end":82996,"line_start":914,"line_end":914,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83197,"byte_end":83212,"line_start":921,"line_end":921,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83815,"byte_end":83831,"line_start":939,"line_end":939,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83890,"byte_end":83906,"line_start":941,"line_end":941,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":695},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86306,"byte_end":86322,"line_start":1012,"line_end":1012,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86978,"byte_end":86994,"line_start":1030,"line_end":1030,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87698,"byte_end":87714,"line_start":1048,"line_end":1048,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89561,"byte_end":89577,"line_start":1094,"line_end":1094,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89763,"byte_end":89779,"line_start":1102,"line_end":1102,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89956,"byte_end":89972,"line_start":1109,"line_end":1109,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90149,"byte_end":90165,"line_start":1116,"line_end":1116,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90366,"byte_end":90382,"line_start":1123,"line_end":1123,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91009,"byte_end":91034,"line_start":1142,"line_end":1142,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91101,"byte_end":91126,"line_start":1146,"line_end":1146,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":764},{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92694,"byte_end":92719,"line_start":1195,"line_end":1195,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94595,"byte_end":94620,"line_start":1241,"line_end":1241,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95314,"byte_end":95339,"line_start":1260,"line_end":1260,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96736,"byte_end":96761,"line_start":1305,"line_end":1305,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96950,"byte_end":96975,"line_start":1313,"line_end":1313,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97164,"byte_end":97189,"line_start":1321,"line_end":1321,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97397,"byte_end":97422,"line_start":1329,"line_end":1329,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98330,"byte_end":98351,"line_start":1356,"line_end":1356,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98425,"byte_end":98446,"line_start":1357,"line_end":1357,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98537,"byte_end":98558,"line_start":1362,"line_end":1362,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":826},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100331,"byte_end":100352,"line_start":1414,"line_end":1414,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101322,"byte_end":101343,"line_start":1434,"line_end":1434,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101512,"byte_end":101533,"line_start":1442,"line_end":1442,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101704,"byte_end":101725,"line_start":1450,"line_end":1450,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101926,"byte_end":101947,"line_start":1458,"line_end":1458,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102855,"byte_end":102877,"line_start":1486,"line_end":1486,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102952,"byte_end":102974,"line_start":1489,"line_end":1489,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103065,"byte_end":103087,"line_start":1494,"line_end":1494,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104899,"byte_end":104921,"line_start":1546,"line_end":1546,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105748,"byte_end":105770,"line_start":1570,"line_end":1570,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106744,"byte_end":106766,"line_start":1590,"line_end":1590,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":897},{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106939,"byte_end":106961,"line_start":1598,"line_end":1598,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107125,"byte_end":107147,"line_start":1605,"line_end":1605,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107321,"byte_end":107343,"line_start":1613,"line_end":1613,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107544,"byte_end":107566,"line_start":1621,"line_end":1621,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6199,"byte_end":6207,"line_start":57,"line_end":57,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":31},"to":{"krate":0,"index":37}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6895,"byte_end":6903,"line_start":76,"line_end":76,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":31},"to":{"krate":0,"index":40}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7930,"byte_end":7935,"line_start":103,"line_end":103,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":45},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8004,"byte_end":8009,"line_start":104,"line_end":104,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":45},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8041,"byte_end":8046,"line_start":106,"line_end":106,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8724,"byte_end":8729,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9096,"byte_end":9101,"line_start":147,"line_end":147,"column_start":30,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11954,"byte_end":11959,"line_start":232,"line_end":232,"column_start":34,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12611,"byte_end":12616,"line_start":250,"line_end":250,"column_start":35,"column_end":40},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13817,"byte_end":13822,"line_start":282,"line_end":282,"column_start":52,"column_end":57},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":45},"to":{"krate":1,"index":2967}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13960,"byte_end":13965,"line_start":289,"line_end":289,"column_start":34,"column_end":39},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":45},"to":{"krate":1,"index":2895}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":14111,"byte_end":14116,"line_start":296,"line_end":296,"column_start":58,"column_end":63},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":45},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":14405,"byte_end":14422,"line_start":302,"line_end":302,"column_start":37,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15915,"byte_end":15925,"line_start":356,"line_end":356,"column_start":74,"column_end":84},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":99},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15983,"byte_end":15993,"line_start":358,"line_end":358,"column_start":44,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":99},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18289,"byte_end":18299,"line_start":429,"line_end":429,"column_start":48,"column_end":58},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":99},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20073,"byte_end":20083,"line_start":475,"line_end":475,"column_start":54,"column_end":64},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":99},"to":{"krate":1,"index":3200}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20267,"byte_end":20277,"line_start":483,"line_end":483,"column_start":57,"column_end":67},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":99},"to":{"krate":1,"index":3213}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20452,"byte_end":20462,"line_start":490,"line_end":490,"column_start":53,"column_end":63},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":99},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20627,"byte_end":20637,"line_start":497,"line_end":497,"column_start":72,"column_end":82},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":99},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20833,"byte_end":20843,"line_start":503,"line_end":503,"column_start":76,"column_end":86},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":99},"to":{"krate":1,"index":9302}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21709,"byte_end":21725,"line_start":527,"line_end":527,"column_start":9,"column_end":25},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":158},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21799,"byte_end":21815,"line_start":530,"line_end":530,"column_start":60,"column_end":76},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":158},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21905,"byte_end":21921,"line_start":535,"line_end":535,"column_start":44,"column_end":60},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23675,"byte_end":23691,"line_start":587,"line_end":587,"column_start":48,"column_end":64},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24627,"byte_end":24643,"line_start":607,"line_end":607,"column_start":54,"column_end":70},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":158},"to":{"krate":1,"index":3200}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24815,"byte_end":24831,"line_start":615,"line_end":615,"column_start":57,"column_end":73},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":158},"to":{"krate":1,"index":3213}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24994,"byte_end":25010,"line_start":622,"line_end":622,"column_start":53,"column_end":69},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":158},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":25169,"byte_end":25185,"line_start":629,"line_end":629,"column_start":72,"column_end":88},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":158},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":25385,"byte_end":25401,"line_start":636,"line_end":636,"column_start":9,"column_end":25},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":158},"to":{"krate":1,"index":9302}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27394,"byte_end":27411,"line_start":57,"line_end":57,"column_start":35,"column_end":52},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":28640,"byte_end":28657,"line_start":103,"line_end":103,"column_start":39,"column_end":56},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29263,"byte_end":29280,"line_start":125,"line_end":125,"column_start":40,"column_end":57},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30239,"byte_end":30253,"line_start":154,"line_end":154,"column_start":9,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":292},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30353,"byte_end":30367,"line_start":158,"line_end":158,"column_start":9,"column_end":23},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":292},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30419,"byte_end":30433,"line_start":162,"line_end":162,"column_start":38,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31547,"byte_end":31561,"line_start":200,"line_end":200,"column_start":15,"column_end":29},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32231,"byte_end":32245,"line_start":220,"line_end":220,"column_start":46,"column_end":60},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35308,"byte_end":35322,"line_start":306,"line_end":306,"column_start":50,"column_end":64},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36011,"byte_end":36025,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37269,"byte_end":37283,"line_start":356,"line_end":356,"column_start":68,"column_end":82},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":292},"to":{"krate":1,"index":2967}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37461,"byte_end":37475,"line_start":363,"line_end":363,"column_start":50,"column_end":64},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":292},"to":{"krate":1,"index":2895}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37661,"byte_end":37675,"line_start":370,"line_end":370,"column_start":74,"column_end":88},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":292},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":38027,"byte_end":38044,"line_start":379,"line_end":379,"column_start":37,"column_end":54},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":353},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39692,"byte_end":39711,"line_start":436,"line_end":436,"column_start":9,"column_end":28},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":357},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39794,"byte_end":39813,"line_start":440,"line_end":440,"column_start":65,"column_end":84},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42276,"byte_end":42295,"line_start":515,"line_end":515,"column_start":5,"column_end":24},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44108,"byte_end":44127,"line_start":563,"line_end":563,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":357},"to":{"krate":1,"index":3200}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44337,"byte_end":44356,"line_start":573,"line_end":573,"column_start":9,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":357},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44551,"byte_end":44570,"line_start":582,"line_end":582,"column_start":9,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":357},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44794,"byte_end":44813,"line_start":590,"line_end":590,"column_start":9,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":357},"to":{"krate":1,"index":9302}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45829,"byte_end":45854,"line_start":618,"line_end":618,"column_start":9,"column_end":34},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":419},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45941,"byte_end":45966,"line_start":623,"line_end":623,"column_start":5,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47838,"byte_end":47863,"line_start":680,"line_end":680,"column_start":5,"column_end":30},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48836,"byte_end":48861,"line_start":702,"line_end":702,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":419},"to":{"krate":1,"index":3200}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49057,"byte_end":49082,"line_start":712,"line_end":712,"column_start":9,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":419},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49269,"byte_end":49294,"line_start":721,"line_end":721,"column_start":9,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":419},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49518,"byte_end":49543,"line_start":729,"line_end":729,"column_start":9,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":419},"to":{"krate":1,"index":9302}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52350,"byte_end":52359,"line_start":67,"line_end":67,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":495},"to":{"krate":0,"index":504}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53515,"byte_end":53524,"line_start":97,"line_end":97,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":495},"to":{"krate":0,"index":509}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53947,"byte_end":53956,"line_start":107,"line_end":107,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":495},"to":{"krate":0,"index":511}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55076,"byte_end":55085,"line_start":134,"line_end":134,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":495},"to":{"krate":0,"index":518}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55475,"byte_end":55493,"line_start":143,"line_end":143,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":518},"to":{"krate":0,"index":521}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55496,"byte_end":55510,"line_start":143,"line_end":143,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":521}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56278,"byte_end":56287,"line_start":159,"line_end":159,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":495},"to":{"krate":0,"index":524}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56937,"byte_end":56953,"line_start":179,"line_end":179,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":524},"to":{"krate":0,"index":530}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56956,"byte_end":56969,"line_start":179,"line_end":179,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":504},"to":{"krate":0,"index":530}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57632,"byte_end":57648,"line_start":196,"line_end":196,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":524},"to":{"krate":0,"index":533}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57651,"byte_end":57669,"line_start":196,"line_end":196,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":509},"to":{"krate":0,"index":533}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58004,"byte_end":58020,"line_start":206,"line_end":206,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":524},"to":{"krate":0,"index":536}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58023,"byte_end":58037,"line_start":206,"line_end":206,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":536}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60139,"byte_end":60145,"line_start":268,"line_end":268,"column_start":61,"column_end":67},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60222,"byte_end":60228,"line_start":269,"line_end":269,"column_start":68,"column_end":74},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60261,"byte_end":60267,"line_start":271,"line_end":271,"column_start":23,"column_end":29},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60999,"byte_end":61005,"line_start":300,"line_end":300,"column_start":12,"column_end":18},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61429,"byte_end":61435,"line_start":315,"line_end":315,"column_start":31,"column_end":37},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66508,"byte_end":66514,"line_start":462,"line_end":462,"column_start":35,"column_end":41},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67853,"byte_end":67859,"line_start":496,"line_end":496,"column_start":36,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70441,"byte_end":70447,"line_start":562,"line_end":562,"column_start":40,"column_end":46},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72264,"byte_end":72270,"line_start":606,"line_end":606,"column_start":45,"column_end":51},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73853,"byte_end":73859,"line_start":650,"line_end":650,"column_start":38,"column_end":44},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75500,"byte_end":75506,"line_start":696,"line_end":696,"column_start":43,"column_end":49},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76938,"byte_end":76944,"line_start":736,"line_end":736,"column_start":53,"column_end":59},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":2967}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77085,"byte_end":77091,"line_start":743,"line_end":743,"column_start":35,"column_end":41},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":2895}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77240,"byte_end":77246,"line_start":750,"line_end":750,"column_start":59,"column_end":65},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77536,"byte_end":77553,"line_start":756,"line_end":756,"column_start":37,"column_end":54},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78238,"byte_end":78253,"line_start":778,"line_end":778,"column_start":68,"column_end":83},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78312,"byte_end":78327,"line_start":780,"line_end":780,"column_start":45,"column_end":60},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80747,"byte_end":80762,"line_start":853,"line_end":853,"column_start":49,"column_end":64},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82595,"byte_end":82610,"line_start":899,"line_end":899,"column_start":55,"column_end":70},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":3200}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82792,"byte_end":82807,"line_start":907,"line_end":907,"column_start":54,"column_end":69},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82981,"byte_end":82996,"line_start":914,"line_end":914,"column_start":73,"column_end":88},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83197,"byte_end":83212,"line_start":921,"line_end":921,"column_start":9,"column_end":24},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":9302}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83815,"byte_end":83831,"line_start":939,"line_end":939,"column_start":68,"column_end":84},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":677},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83890,"byte_end":83906,"line_start":941,"line_end":941,"column_start":45,"column_end":61},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86306,"byte_end":86322,"line_start":1012,"line_end":1012,"column_start":54,"column_end":70},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86978,"byte_end":86994,"line_start":1030,"line_end":1030,"column_start":61,"column_end":77},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87698,"byte_end":87714,"line_start":1048,"line_end":1048,"column_start":49,"column_end":65},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89561,"byte_end":89577,"line_start":1094,"line_end":1094,"column_start":55,"column_end":71},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":677},"to":{"krate":1,"index":3200}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89763,"byte_end":89779,"line_start":1102,"line_end":1102,"column_start":58,"column_end":74},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":677},"to":{"krate":1,"index":3213}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89956,"byte_end":89972,"line_start":1109,"line_end":1109,"column_start":54,"column_end":70},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":677},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90149,"byte_end":90165,"line_start":1116,"line_end":1116,"column_start":73,"column_end":89},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":677},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90366,"byte_end":90382,"line_start":1123,"line_end":1123,"column_start":9,"column_end":25},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":677},"to":{"krate":1,"index":9302}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91009,"byte_end":91034,"line_start":1142,"line_end":1142,"column_start":9,"column_end":34},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":746},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91101,"byte_end":91126,"line_start":1146,"line_end":1146,"column_start":52,"column_end":77},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92694,"byte_end":92719,"line_start":1195,"line_end":1195,"column_start":56,"column_end":81},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94595,"byte_end":94620,"line_start":1241,"line_end":1241,"column_start":61,"column_end":86},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95314,"byte_end":95339,"line_start":1260,"line_end":1260,"column_start":57,"column_end":82},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96736,"byte_end":96761,"line_start":1305,"line_end":1305,"column_start":62,"column_end":87},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":746},"to":{"krate":1,"index":3200}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96950,"byte_end":96975,"line_start":1313,"line_end":1313,"column_start":61,"column_end":86},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":746},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97164,"byte_end":97189,"line_start":1321,"line_end":1321,"column_start":9,"column_end":34},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":746},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97397,"byte_end":97422,"line_start":1329,"line_end":1329,"column_start":9,"column_end":34},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":746},"to":{"krate":1,"index":9302}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98330,"byte_end":98351,"line_start":1356,"line_end":1356,"column_start":68,"column_end":89},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98425,"byte_end":98446,"line_start":1357,"line_end":1357,"column_start":61,"column_end":82},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98537,"byte_end":98558,"line_start":1362,"line_end":1362,"column_start":45,"column_end":66},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100331,"byte_end":100352,"line_start":1414,"line_end":1414,"column_start":49,"column_end":70},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101322,"byte_end":101343,"line_start":1434,"line_end":1434,"column_start":55,"column_end":76},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":3200}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101512,"byte_end":101533,"line_start":1442,"line_end":1442,"column_start":54,"column_end":75},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101704,"byte_end":101725,"line_start":1450,"line_end":1450,"column_start":9,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101926,"byte_end":101947,"line_start":1458,"line_end":1458,"column_start":9,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":9302}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102855,"byte_end":102877,"line_start":1486,"line_end":1486,"column_start":9,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102952,"byte_end":102974,"line_start":1489,"line_end":1489,"column_start":61,"column_end":83},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103065,"byte_end":103087,"line_start":1494,"line_end":1494,"column_start":45,"column_end":67},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104899,"byte_end":104921,"line_start":1546,"line_end":1546,"column_start":54,"column_end":76},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105748,"byte_end":105770,"line_start":1570,"line_end":1570,"column_start":49,"column_end":71},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106744,"byte_end":106766,"line_start":1590,"line_end":1590,"column_start":55,"column_end":77},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":3200}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106939,"byte_end":106961,"line_start":1598,"line_end":1598,"column_start":58,"column_end":80},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":3213}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107125,"byte_end":107147,"line_start":1605,"line_end":1605,"column_start":54,"column_end":76},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107321,"byte_end":107343,"line_start":1613,"line_end":1613,"column_start":9,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":9295}},{"span":{"file_name":"/Users/zhangshaozhi/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107544,"byte_end":107566,"line_start":1621,"line_end":1621,"column_start":9,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":9302}}]}